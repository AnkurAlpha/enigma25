---
interface Props {
  messages: string[];
}

const { 
  messages = ["Initializing system...", "Access granted", "Loading data..."]
} = Astro.props;
---

<div class="typewriter-container">
  <div class="typewriter-text" data-messages={JSON.stringify(messages)} id="typewriterText">_</div>
</div>

<style>
  .typewriter-container {
    background-color: #0a0a0a;
    padding: 1.5rem;
    border-radius: 4px;
    font-family: 'Courier New', Courier, monospace;
  }

  .typewriter-text {
    color: #00ff00;
    font-size: 1.1rem;
    white-space: pre-wrap;
    min-height: 1.5em;
  }
</style>

<script>
  class Typewriter {
    element: HTMLElement;
    messages: string[];
    currentMessageIndex: number = 0;
    currentCharIndex: number = 0;
    
    constructor(element: HTMLElement, messages: string[]) {
      this.element = element;
      this.messages = messages;
      this.type();
    }
    
    async type() {
      const currentMessage = this.messages[this.currentMessageIndex];
      
      if (this.currentCharIndex < currentMessage.length) {
        this.element.textContent = currentMessage.slice(0, this.currentCharIndex + 1) + "_";
        this.currentCharIndex++;
        setTimeout(() => this.type(), 100);
      } else {
        setTimeout(() => this.nextMessage(), 1500);
      }
    }
    
    nextMessage() {
      this.currentMessageIndex = (this.currentMessageIndex + 1) % this.messages.length;
      this.currentCharIndex = 0;
      this.element.textContent = "_";
      this.type();
    }
  }
  
  // Initialize typewriter when the DOM is loaded
  function init() {
    const element = document.getElementById('typewriterText');
    if (element) {
      const messages = JSON.parse(element.dataset.messages || '[]');
      new Typewriter(element, messages);
    }
  }

  // Handle both initial load and subsequent navigations
  document.addEventListener('DOMContentLoaded', init);
  document.addEventListener('astro:page-load', init);
</script>